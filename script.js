class YouTubeSearchTool {
    constructor() {
        this.baseUrl = 'https://www.googleapis.com/youtube/v3';
        this.searchResults = [];
        
        // API Keys management
        this.apiKeys = [];
        this.currentApiKeyIndex = 0;
        this.keyValidationStatus = {};
        
        // Comment pagination variables
        this.currentVideoId = null;
        this.nextPageToken = null;
        this.isLoadingComments = false;
        this.hasMoreComments = true;
        this.targetCommentCount = 50;
        this.currentCommentCount = 0;
        
        this.initializeEventListeners();
        this.loadSavedApiKeys();
    }
    
    getCurrentApiKey() {
        if (this.apiKeys.length === 0) return null;
        return this.apiKeys[this.currentApiKeyIndex];
    }
    
    switchToNextApiKey() {
        if (this.apiKeys.length <= 1) return false;
        
        this.currentApiKeyIndex = (this.currentApiKeyIndex + 1) % this.apiKeys.length;
        console.log(`Switched to API key index: ${this.currentApiKeyIndex}`);
        this.updateCurrentKeyDisplay();
        return true;
    }
    
    loadSavedApiKeys() {
        try {
            const savedKeys = localStorage.getItem('youtube_api_keys');
            if (savedKeys) {
                this.apiKeys = JSON.parse(savedKeys);
                this.updateApiKeyTextarea();
                this.updateApiKeyCount();
                this.updateCurrentKeyDisplay();
                
                // Validate saved keys
                if (this.apiKeys.length > 0) {
                    this.validateAllApiKeys();
                }
            }
        } catch (error) {
            console.error('Error loading saved API keys:', error);
            this.apiKeys = [];
        }
    }
    
    saveApiKeys() {
        try {
            localStorage.setItem('youtube_api_keys', JSON.stringify(this.apiKeys));
        } catch (error) {
            console.error('Error saving API keys:', error);
        }
    }
    
    parseApiKeysFromTextarea() {
        const textarea = document.getElementById('apiKeyInput');
        const text = textarea.value.trim();
        
        if (!text) return [];
        
        const keys = text.split('\n')
            .map(key => key.trim())
            .filter(key => key.length > 0)
            .filter((key, index, array) => array.indexOf(key) === index); // Remove duplicates
        
        return keys;
    }
    
    updateApiKeyTextarea() {
        const textarea = document.getElementById('apiKeyInput');
        textarea.value = this.apiKeys.join('\n');
    }
    
    updateApiKeyCount() {
        const countElement = document.querySelector('.api-key-count');
        if (countElement) {
            countElement.textContent = `${this.apiKeys.length} API key${this.apiKeys.length !== 1 ? 's' : ''}`;
        }
    }
    
    updateCurrentKeyDisplay() {
        const currentKeyElement = document.getElementById('currentKeyIndex');
        if (currentKeyElement) {
            if (this.apiKeys.length > 0) {
                const currentKey = this.getCurrentApiKey();
                const preview = currentKey ? `${currentKey.substring(0, 15)}...` : 'None';
                currentKeyElement.textContent = `#${this.currentApiKeyIndex + 1} (${preview})`;
            } else {
                currentKeyElement.textContent = 'Ch∆∞a c√≥';
            }
        }
    }
    
    translateErrorMessage(errorMessage) {
        const translations = {
            'API key not valid': 'API key kh√¥ng h·ª£p l·ªá',
            'API key is missing': 'Thi·∫øu API key',
            'quota': 'ƒê√£ h·∫øt quota h·∫±ng ng√†y',
            'quotaExceeded': 'ƒê√£ v∆∞·ª£t quota',
            'rateLimitExceeded': 'V∆∞·ª£t gi·ªõi h·∫°n t·∫ßn su·∫•t',
            'invalidParameter': 'Tham s·ªë kh√¥ng h·ª£p l·ªá',
            'forbidden': 'B·ªã c·∫•m truy c·∫≠p',
            'keyExpired': 'API key ƒë√£ h·∫øt h·∫°n',
            'keyInvalid': 'API key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
            'Daily Limit Exceeded': 'ƒê√£ v∆∞·ª£t gi·ªõi h·∫°n h·∫±ng ng√†y',
            'The request cannot be completed because you have exceeded your quota': 'Kh√¥ng th·ªÉ ho√†n th√†nh y√™u c·∫ßu v√¨ b·∫°n ƒë√£ v∆∞·ª£t quota',
            'YouTube Data API v3 has not been used in project': 'YouTube Data API v3 ch∆∞a ƒë∆∞·ª£c b·∫≠t trong project',
            'API key is not valid': 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã h·∫°n ch·∫ø',
            'Network error': 'L·ªói k·∫øt n·ªëi m·∫°ng',
            'Bad Request': 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá',
            'Unauthorized': 'Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p',
            'Forbidden': 'B·ªã c·∫•m truy c·∫≠p - ki·ªÉm tra API key',
            'Not Found': 'Kh√¥ng t√¨m th·∫•y endpoint',
            'Internal Server Error': 'L·ªói m√°y ch·ªß n·ªôi b·ªô'
        };

        // T√¨m t·ª´ kh√≥a trong error message
        for (const [key, value] of Object.entries(translations)) {
            if (errorMessage.toLowerCase().includes(key.toLowerCase())) {
                return value;
            }
        }

        return errorMessage; // Tr·∫£ v·ªÅ original n·∫øu kh√¥ng t√¨m th·∫•y translation
    }

    async validateSingleApiKey(apiKey) {
        try {
            const response = await fetch(`${this.baseUrl}/search?part=snippet&q=test&maxResults=1&key=${apiKey}`);
            const data = await response.json();
            
            if (data.error) {
                const translatedError = this.translateErrorMessage(data.error.message);
                return { valid: false, error: translatedError };
            } else {
                return { valid: true, error: null };
            }
        } catch (error) {
            const translatedError = this.translateErrorMessage(error.message || 'L·ªói k·∫øt n·ªëi');
            return { valid: false, error: translatedError };
        }
    }
    
    async validateAllApiKeys() {
        const statusList = document.getElementById('apiStatusList');
        statusList.innerHTML = '';
        
        if (this.apiKeys.length === 0) {
            statusList.innerHTML = '<p class="no-keys">Ch∆∞a c√≥ API key n√†o</p>';
            return;
        }
        
        // Show checking status
        this.apiKeys.forEach((key, index) => {
            const keyItem = this.createApiKeyStatusItem(key, index, 'checking', 'ƒêang ki·ªÉm tra...');
            statusList.appendChild(keyItem);
        });
        
        // Validate each key
        for (let i = 0; i < this.apiKeys.length; i++) {
            const key = this.apiKeys[i];
            const result = await this.validateSingleApiKey(key);
            
            this.keyValidationStatus[key] = result;
            
            // Update UI
            const keyItem = statusList.children[i];
            if (result.valid) {
                keyItem.className = `api-key-item valid ${i === this.currentApiKeyIndex ? 'current' : ''}`;
                keyItem.querySelector('.key-status').textContent = '‚úÖ H·ª£p l·ªá';
            } else {
                keyItem.className = `api-key-item invalid ${i === this.currentApiKeyIndex ? 'current' : ''}`;
                keyItem.querySelector('.key-status').textContent = `‚ùå ${result.error}`;
            }
            
            // Small delay between requests
            await new Promise(resolve => setTimeout(resolve, 300));
        }
    }
    
    createApiKeyStatusItem(key, index, status, statusText) {
        const item = document.createElement('div');
        item.className = `api-key-item ${status} ${index === this.currentApiKeyIndex ? 'current' : ''}`;
        
        const preview = key.substring(0, 15) + '...';
        
        item.innerHTML = `
            <div class="key-preview">#${index + 1}: ${preview}</div>
            <div style="display: flex; align-items: center; gap: 5px;">
                <span class="key-status">${statusText}</span>
                <button class="key-remove" onclick="removeApiKey(${index})" title="X√≥a key n√†y">üóëÔ∏è</button>
            </div>
        `;
        
        return item;
    }
    
    removeApiKeyAt(index) {
        if (index >= 0 && index < this.apiKeys.length) {
            const removedKey = this.apiKeys[index];
            this.apiKeys.splice(index, 1);
            
            // Delete validation status
            delete this.keyValidationStatus[removedKey];
            
            // Adjust current index if necessary
            if (this.currentApiKeyIndex >= index && this.currentApiKeyIndex > 0) {
                this.currentApiKeyIndex--;
            } else if (this.currentApiKeyIndex >= this.apiKeys.length && this.apiKeys.length > 0) {
                this.currentApiKeyIndex = 0;
            }
            
            this.saveApiKeys();
            this.updateApiKeyTextarea();
            this.updateApiKeyCount();
            this.updateCurrentKeyDisplay();
            this.validateAllApiKeys();
        }
    }
    
    addApiKeysFromTextarea() {
        const newKeys = this.parseApiKeysFromTextarea();
        
        if (newKeys.length === 0) {
            alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt API key!');
            return;
        }
        
        // Add only new keys
        const addedKeys = [];
        newKeys.forEach(key => {
            if (!this.apiKeys.includes(key)) {
                this.apiKeys.push(key);
                addedKeys.push(key);
            }
        });
        
        if (addedKeys.length === 0) {
            alert('T·∫•t c·∫£ API key ƒë√£ t·ªìn t·∫°i!');
            return;
        }
        
        this.saveApiKeys();
        this.updateApiKeyTextarea();
        this.updateApiKeyCount();
        this.updateCurrentKeyDisplay();
        this.validateAllApiKeys();
        
        showNotification(`ƒê√£ th√™m ${addedKeys.length} API key m·ªõi!`, 3000);
    }
    
    clearAllApiKeys() {
        if (this.apiKeys.length === 0) {
            alert('Kh√¥ng c√≥ API key n√†o ƒë·ªÉ x√≥a!');
            return;
        }
        
        if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ ${this.apiKeys.length} API key?`)) {
            this.apiKeys = [];
            this.currentApiKeyIndex = 0;
            this.keyValidationStatus = {};
            
            this.saveApiKeys();
            this.updateApiKeyTextarea();
            this.updateApiKeyCount();
            this.updateCurrentKeyDisplay();
            
            const statusList = document.getElementById('apiStatusList');
            statusList.innerHTML = '<p class="no-keys">Ch∆∞a c√≥ API key n√†o</p>';
            
            showNotification('ƒê√£ x√≥a t·∫•t c·∫£ API key!', 2000);
        }
    }
    
    initializeEventListeners() {
        document.getElementById('searchBtn').addEventListener('click', () => this.searchVideos());
        document.getElementById('downloadBtn').addEventListener('click', () => this.downloadResults());
        document.getElementById('copyColumn8Btn').addEventListener('click', () => this.copyColumn8());
        document.getElementById('copySelectedBtn').addEventListener('click', () => this.copySelectedRows());
        document.getElementById('applyBtn').addEventListener('click', () => this.applyCustomValues());
        
        // API Key management events
        document.getElementById('validateAllKeys').addEventListener('click', () => this.validateAllApiKeys());
        document.getElementById('addMoreKeys').addEventListener('click', () => this.addApiKeysFromTextarea());
        document.getElementById('clearAllKeys').addEventListener('click', () => this.clearAllApiKeys());
        
        // Select all checkbox trong header
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', (e) => {
                this.toggleAllRows(e.target.checked);
            });
        }
        
        // Column checkbox events
        ['includeKeyword', 'includeTitle', 'includeVideoId', 'includeVideoUrl', 'includeChannelName', 'includeChannelUrl', 'includeDuration'].forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', () => {
                    this.updateResultsIfAvailable();
                });
            }
        });
        
        // Format checkbox events
        const addChannelName = document.getElementById('addChannelName');
        const addVideoTitle = document.getElementById('addVideoTitle');
        
        if (addChannelName) {
            addChannelName.addEventListener('change', (e) => {
                if (e.target.checked) {
                    this.updateTickOrder('channelName');
                } else {
                    this.removeFromTickOrder('channelName');
                }
                this.updateResultsIfAvailable();
            });
        }
        
        if (addVideoTitle) {
            addVideoTitle.addEventListener('change', (e) => {
                if (e.target.checked) {
                    this.updateTickOrder('videoTitle');
                } else {
                    this.removeFromTickOrder('videoTitle');
                }
                this.updateResultsIfAvailable();
            });
        }
    }
    
    // Th√™m method validateCurrentApiKey b·ªã thi·∫øu
    async validateCurrentApiKey() {
        const currentKey = this.getCurrentApiKey();
        if (!currentKey) {
            return false;
        }

        try {
            const response = await fetch(`${this.baseUrl}/search?part=snippet&q=test&maxResults=1&key=${currentKey}`);
            const data = await response.json();
            
            if (data.error) {
                return false;
            } else {
                return true;
            }
        } catch (error) {
            return false;
        }
    }

    // S·ª≠a l·∫°i method searchVideos
    async searchVideos() {
        // Ki·ªÉm tra API key tr∆∞·ªõc khi t√¨m ki·∫øm
        if (this.apiKeys.length === 0) {
            alert('Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt YouTube API Key tr∆∞·ªõc khi t√¨m ki·∫øm!');
            return;
        }

        const keywordInput = document.getElementById('searchKeyword').value.trim();
        const videoCount = parseInt(document.getElementById('videoCount').value);
        
        if (!keywordInput) {
            alert('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!');
            return;
        }
        
        // T√°ch t·ª´ kh√≥a b·∫±ng c·∫£ xu·ªëng d√≤ng V√Ä d·∫•u ph·∫©y
        const keywords = this.parseKeywords(keywordInput);
        
        if (keywords.length === 0) {
            alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt t·ª´ kh√≥a h·ª£p l·ªá!');
            return;
        }
        
        this.showLoading();
        this.hideError();
        
        // X√≥a k·∫øt qu·∫£ c≈©
        this.searchResults = [];
        
        try {
            const filters = this.getSearchFilters();
            
            // Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t·ª´ kh√≥a s·∫Ω t√¨m
            console.log(`B·∫Øt ƒë·∫ßu t√¨m ki·∫øm v·ªõi ${keywords.length} t·ª´ kh√≥a:`, keywords);
            
            // T√¨m ki·∫øm cho t·ª´ng t·ª´ kh√≥a
            for (const keyword of keywords) {
                await this.searchSingleKeyword(keyword, videoCount, filters);
                
                // Th√™m delay nh·ªè gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
                await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            if (this.searchResults.length > 0) {
                this.displayResults();
                document.getElementById('downloadBtn').disabled = false;
                document.getElementById('copyColumn8Btn').disabled = false;
                document.getElementById('copySelectedBtn').disabled = false;
                document.getElementById('applyBtn').disabled = false;
            } else {
                this.showError('Kh√¥ng t√¨m th·∫•y video n√†o v·ªõi c√°c t·ª´ kh√≥a n√†y.');
            }
            
        } catch (error) {
            console.error('Search error:', error);
            this.showError('C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm: ' + this.translateErrorMessage(error.message));
        }
        
        this.hideLoading();
    }

    // S·ª≠a l·∫°i method searchSingleKeyword
    async searchSingleKeyword(keyword, videoCount, filters) {
        const searchParams = {
            part: 'snippet',
            q: keyword,
            type: 'video',
            maxResults: Math.min(videoCount, 50),
            key: this.getCurrentApiKey(),
            regionCode: 'US', // L·∫•y k·∫øt qu·∫£ t·ª´ khu v·ª±c M·ªπ
            relevanceLanguage: 'en', // ∆Øu ti√™n n·ªôi dung ti·∫øng Anh
            hl: 'en', // S·ª≠ d·ª•ng hl=en ƒë·ªÉ t√¨m ki·∫øm, x·ª≠ l√Ω ng√¥n ng·ªØ trong getVideoDetails
            ...filters
        };
        
        let retryCount = 0;
        const maxRetries = this.apiKeys.length;
        
        while (retryCount < maxRetries) {
            try {
                const response = await fetch(`${this.baseUrl}/search?${new URLSearchParams(searchParams)}`);
                const data = await response.json();
                
                if (data.error) {
                    if (data.error.message.includes('quota') && this.switchToNextApiKey()) {
                        console.log('API key quota exceeded, switching to next key...');
                        searchParams.key = this.getCurrentApiKey();
                        retryCount++;
                        continue; // Th·ª≠ l·∫°i v·ªõi key m·ªõi
                    } else {
                        throw new Error(this.translateErrorMessage(data.error.message));
                    }
                } else {
                    if (data.items && data.items.length > 0) {
                        await this.getVideoDetails(data.items, keyword);
                    }
                    break; // Th√†nh c√¥ng, tho√°t loop
                }
            } catch (error) {
                if (retryCount === maxRetries - 1) {
                    throw error; // ƒê√£ th·ª≠ h·∫øt key, throw error
                }
                retryCount++;
            }
        }
    }

    // Th√™m method translateErrorMessage n·∫øu ch∆∞a c√≥
    translateErrorMessage(errorMessage) {
        const translations = {
            'API key not valid': 'API key kh√¥ng h·ª£p l·ªá',
            'API key is missing': 'Thi·∫øu API key',
            'quota': 'ƒê√£ h·∫øt quota h·∫±ng ng√†y',
            'quotaExceeded': 'ƒê√£ v∆∞·ª£t quota',
            'rateLimitExceeded': 'V∆∞·ª£t gi·ªõi h·∫°n t·∫ßn su·∫•t',
            'invalidParameter': 'Tham s·ªë kh√¥ng h·ª£p l·ªá',
            'forbidden': 'B·ªã c·∫•m truy c·∫≠p',
            'keyExpired': 'API key ƒë√£ h·∫øt h·∫°n',
            'keyInvalid': 'API key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
            'Daily Limit Exceeded': 'ƒê√£ v∆∞·ª£t gi·ªõi h·∫°n h·∫±ng ng√†y',
            'The request cannot be completed because you have exceeded your quota': 'Kh√¥ng th·ªÉ ho√†n th√†nh y√™u c·∫ßu v√¨ b·∫°n ƒë√£ v∆∞·ª£t quota',
            'YouTube Data API v3 has not been used in project': 'YouTube Data API v3 ch∆∞a ƒë∆∞·ª£c b·∫≠t trong project',
            'API key is not valid': 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã h·∫°n ch·∫ø',
            'Network error': 'L·ªói k·∫øt n·ªëi m·∫°ng',
            'Bad Request': 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá',
            'Unauthorized': 'Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p',
            'Forbidden': 'B·ªã c·∫•m truy c·∫≠p - ki·ªÉm tra API key',
            'Not Found': 'Kh√¥ng t√¨m th·∫•y endpoint',
            'Internal Server Error': 'L·ªói m√°y ch·ªß n·ªôi b·ªô'
        };

        // T√¨m t·ª´ kh√≥a trong error message
        for (const [key, value] of Object.entries(translations)) {
            if (errorMessage && errorMessage.toLowerCase().includes(key.toLowerCase())) {
                return value;
            }
        }

        return errorMessage || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'; // Tr·∫£ v·ªÅ original n·∫øu kh√¥ng t√¨m th·∫•y translation
    }

    // ƒê·∫£m b·∫£o method parseKeywords t·ªìn t·∫°i
    parseKeywords(input) {
        // B∆∞·ªõc 1: T√°ch theo xu·ªëng d√≤ng tr∆∞·ªõc
        const linesByNewline = input.split('\n');
        
        // B∆∞·ªõc 2: V·ªõi m·ªói d√≤ng, t√°ch ti·∫øp theo d·∫•u ph·∫©y
        const allKeywords = [];
        
        linesByNewline.forEach(line => {
            // T√°ch theo d·∫•u ph·∫©y trong m·ªói d√≤ng
            const keywordsInLine = line.split(',');
            keywordsInLine.forEach(keyword => {
                const trimmedKeyword = keyword.trim();
                if (trimmedKeyword.length > 0) {
                    allKeywords.push(trimmedKeyword);
                }
            });
        });
        
        // Lo·∫°i b·ªè t·ª´ kh√≥a tr√πng l·∫∑p (n·∫øu c√≥)
        const uniqueKeywords = [...new Set(allKeywords)];
        
        console.log('Parsed keywords:', uniqueKeywords);
        return uniqueKeywords;
    }

    // ƒê·∫£m b·∫£o method getSearchFilters t·ªìn t·∫°i
    getSearchFilters() {
        const filters = {};
        
        // B·ªô l·ªçc ng√†y t·∫£i l√™n - s·ª≠ d·ª•ng publishedAfter
        const uploadDate = document.getElementById('uploadDate')?.value;
        if (uploadDate) {
            const now = new Date();
            let publishedAfter;
            
            switch (uploadDate) {
                case 'hour':
                    publishedAfter = new Date(now.getTime() - 60 * 60 * 1000);
                    break;
                case 'today':
                    publishedAfter = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    break;
                case 'week':
                    publishedAfter = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'month':
                    publishedAfter = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                    break;
                case 'year':
                    publishedAfter = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
                    break;
            }
            
            if (publishedAfter) {
                filters.publishedAfter = publishedAfter.toISOString();
            }
        }
        
        // B·ªô l·ªçc lo·∫°i - ch·ªâ h·ªó tr·ª£ video, channel, playlist
        const type = document.getElementById('type')?.value;
        if (type) {
            filters.type = type;
        }
        
        // B·ªô l·ªçc th·ªùi l∆∞·ª£ng - s·ª≠ d·ª•ng videoDuration
        const duration = document.getElementById('duration')?.value;
        if (duration) {
            filters.videoDuration = duration;
        }
        
        // B·ªô l·ªçc t√≠nh nƒÉng
        const features = document.getElementById('features')?.value;
        if (features) {
            switch (features) {
                case 'live':
                    filters.eventType = 'live';
                    break;
                case '4k':
                case 'hd':
                    filters.videoDefinition = 'high';
                    break;
                case 'cc':
                    filters.videoCaption = 'closedCaption';
                    break;
                case 'creativeCommons':
                    filters.videoLicense = 'creativeCommon';
                    break;
                case '360':
                    filters.videoDimension = '3d';
                    break;
                case 'hdr':
                    filters.videoDefinition = 'high';
                    break;
            }
        }
        
        // B·ªô l·ªçc s·∫Øp x·∫øp - s·ª≠ d·ª•ng order
        const sortBy = document.getElementById('sortBy')?.value;
        if (sortBy) {
            const sortMap = {
                'relevance': 'relevance',
                'date': 'date',
                'viewCount': 'viewCount',
                'rating': 'rating'
            };
            filters.order = sortMap[sortBy];
        }
        
        return filters;
    }
    
    async getVideoDetails(videoItems, keyword) {
        try {
            const videoIds = videoItems.map(item => item.id.videoId).join(',');
            
            // L·∫•y th√¥ng tin video v·ªõi localized ƒë·ªÉ ki·ªÉm tra xem c√≥ ti√™u ƒë·ªÅ ti·∫øng Anh kh√¥ng
            const response = await fetch(`${this.baseUrl}/videos?part=snippet,contentDetails,liveStreamingDetails,statistics,localizations&id=${videoIds}&hl=en&key=${this.getCurrentApiKey()}`);
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error.message);
            }
            
            // L·∫•y th√¥ng tin chi ti·∫øt channel ƒë·ªÉ c√≥ custom URL th·ª±c t·∫ø
            const channelIds = [...new Set(data.items.map(video => video.snippet.channelId))];
            const channelDetails = await this.getChannelDetails(channelIds);
            
            const newResults = data.items.map((video, index) => {
                const searchItem = videoItems[index];
                const originalDuration = this.formatDuration(video.contentDetails.duration, video.liveStreamingDetails);
                
                // X·ª≠ l√Ω l∆∞·ª£t xem
                let viewCount = 'N/A';
                if (video.liveStreamingDetails && video.liveStreamingDetails.actualStartTime) {
                    // Video livestream
                    if (video.liveStreamingDetails.concurrentViewers) {
                        // ƒêang live - hi·ªÉn th·ªã s·ªë ng∆∞·ªùi xem hi·ªán t·∫°i
                        viewCount = this.formatNumber(video.liveStreamingDetails.concurrentViewers) + ' ƒëang xem';
                    } else if (video.statistics && video.statistics.viewCount) {
                        // Livestream ƒë√£ k·∫øt th√∫c - hi·ªÉn th·ªã t·ªïng l∆∞·ª£t xem
                        viewCount = this.formatNumber(video.statistics.viewCount) + ' l∆∞·ª£t xem (Livestream)';
                    }
                } else if (video.statistics && video.statistics.viewCount) {
                    // Video th∆∞·ªùng - hi·ªÉn th·ªã t·ªïng l∆∞·ª£t xem
                    viewCount = this.formatNumber(video.statistics.viewCount) + ' l∆∞·ª£t xem';
                }
                
                // L·∫•y URL channel th·ª±c t·∫ø t·ª´ channel details
                const channelInfo = channelDetails.find(ch => ch.id === video.snippet.channelId);
                let channelUrl = `https://www.youtube.com/channel/${video.snippet.channelId}`; // Fallback
                
                if (channelInfo && channelInfo.snippet.customUrl) {
                    // N·∫øu c√≥ custom URL, s·ª≠ d·ª•ng format /@customUrl
                    channelUrl = `https://www.youtube.com/@${channelInfo.snippet.customUrl.replace('@', '')}`;
                } else if (channelInfo && channelInfo.snippet.handle) {
                    // N·∫øu c√≥ handle, s·ª≠ d·ª•ng handle
                    channelUrl = `https://www.youtube.com/@${channelInfo.snippet.handle.replace('@', '')}`;
                }
                
                // Logic m·ªõi: Ki·ªÉm tra xem video c√≥ h·ªó tr·ª£ ti√™u ƒë·ªÅ ti·∫øng Anh kh√¥ng
                const defaultTitle = video.snippet.title; // Ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ l√† ti·∫øng Anh ho·∫∑c g·ªëc)
                const defaultChannelName = video.snippet.channelTitle;
                
                // Ki·ªÉm tra xem c√≥ localized title ti·∫øng Anh kh√¥ng
                let finalTitle = defaultTitle;
                let finalChannelName = defaultChannelName;
                
                if (video.localizations && video.localizations.en) {
                    // Video c√≥ h·ªó tr·ª£ ti√™u ƒë·ªÅ ti·∫øng Anh
                    const englishTitle = video.localizations.en.title;
                    const englishDescription = video.localizations.en.description;
                    
                    if (englishTitle && englishTitle.trim() !== '') {
                        finalTitle = englishTitle;
                        console.log(`‚úÖ Video ${video.id} c√≥ ti√™u ƒë·ªÅ ti·∫øng Anh: "${englishTitle.substring(0, 50)}..."`);
                    } else {
                        console.log(`üåê Video ${video.id} kh√¥ng c√≥ ti√™u ƒë·ªÅ ti·∫øng Anh, gi·ªØ nguy√™n: "${defaultTitle.substring(0, 50)}..."`);
                    }
                } else {
                    // Video kh√¥ng c√≥ localized ti·∫øng Anh
                    console.log(`üåê Video ${video.id} kh√¥ng h·ªó tr·ª£ ti·∫øng Anh, gi·ªØ nguy√™n: "${defaultTitle.substring(0, 50)}..."`);
                }
                
                return {
                    keyword: keyword,
                    title: finalTitle,
                    originalTitle: finalTitle,
                    videoId: video.id,
                    videoUrl: `https://www.youtube.com/watch?v=${video.id}`,
                    channelName: finalChannelName,
                    originalChannelName: finalChannelName,
                    channelId: video.snippet.channelId,
                    channelUrl: channelUrl,
                    duration: originalDuration,
                    originalDuration: originalDuration,
                    viewCount: viewCount,
                    thumbnail: video.snippet.thumbnails.medium ? video.snippet.thumbnails.medium.url : video.snippet.thumbnails.default.url,
                    summary: this.createSummary(finalChannelName, video.snippet.channelId, finalTitle, video.id, originalDuration, keyword, '', channelUrl)
                };
            });
            
            this.searchResults = this.searchResults.concat(newResults);
            
        } catch (error) {
            console.error('Video details error:', error);
            throw error;
        }
    }
    
    // Method ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a - kh√¥ng d·ªãch t·ª± ƒë·ªông n·ªØa
    // YouTube API v·ªõi hl=en ƒë√£ x·ª≠ l√Ω vi·ªác hi·ªÉn th·ªã ng√¥n ng·ªØ ph√π h·ª£p
    async translateAllResults() {
        // Kh√¥ng l√†m g√¨ c·∫£ - YouTube API ƒë√£ x·ª≠ l√Ω vi·ªác hi·ªÉn th·ªã ng√¥n ng·ªØ
        console.log('‚ÑπÔ∏è B·ªè qua d·ªãch thu·∫≠t t·ª± ƒë·ªông - YouTube API ƒë√£ x·ª≠ l√Ω ng√¥n ng·ªØ ph√π h·ª£p');
        return;
    }

    // Method d·ªãch ƒë∆°n gi·∫£n s·ª≠ d·ª•ng Google Translate mi·ªÖn ph√≠
    async simpleTranslate(text) {
        if (!text || text.trim() === '') return text;
        
        try {
            // S·ª≠ d·ª•ng Google Translate qua mygoodtranslations.com (mi·ªÖn ph√≠)
            const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=en&dt=t&q=${encodeURIComponent(text)}`;
            
            const response = await fetch(url);
            const data = await response.json();
            
            if (data && data[0] && data[0][0] && data[0][0][0]) {
                return data[0][0][0];
            }
            
            throw new Error('Google Translate response invalid');
            
        } catch (error) {
            // Fallback: s·ª≠ d·ª•ng MyMemory
            try {
                const url2 = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=auto|en`;
                const response2 = await fetch(url2);
                const data2 = await response2.json();
                
                if (data2.responseStatus === 200 && data2.responseData && data2.responseData.translatedText) {
                    return data2.responseData.translatedText;
                }
                
                throw new Error('MyMemory also failed');
                
            } catch (error2) {
                console.warn('T·∫•t c·∫£ d·ªãch v·ª• d·ªãch ƒë·ªÅu th·∫•t b·∫°i:', error2.message);
                return text; // Tr·∫£ v·ªÅ text g·ªëc
            }
        }
    }

    // Ki·ªÉm tra text c√≥ ph·∫£i ti·∫øng Anh kh√¥ng
    isEnglish(text) {
        if (!text || text.length < 2) return true;
        
        // Ki·ªÉm tra c√≥ k√Ω t·ª± Unicode kh√¥ng (kh√¥ng ph·∫£i ASCII)
        const hasUnicode = /[^\u0000-\u007F]/.test(text);
        
        // N·∫øu c√≥ k√Ω t·ª± Unicode, c√≥ th·ªÉ kh√¥ng ph·∫£i ti·∫øng Anh
        if (hasUnicode) {
            return false;
        }
        
        // Ki·ªÉm tra t·ª∑ l·ªá ch·ªØ c√°i Latin
        const latinLetters = (text.match(/[a-zA-Z]/g) || []).length;
        const totalChars = text.replace(/[\s\d\.,!?()'"@#$%^&*\-_+={}[\]\\|:;<>/~`]/g, '').length;
        
        if (totalChars === 0) return true; // Ch·ªâ c√≥ s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        
        return (latinLetters / totalChars) > 0.8; // 80% l√† ch·ªØ c√°i Latin
    }

    // Th√™m method m·ªõi ƒë·ªÉ l·∫•y th√¥ng tin channel chi ti·∫øt
    async getChannelDetails(channelIds) {
        try {
            if (channelIds.length === 0) return [];
            
            const channelIdsString = channelIds.join(',');
            
            // L·∫•y th√¥ng tin channel v·ªõi localized ƒë·ªÉ ki·ªÉm tra xem c√≥ t√™n ti·∫øng Anh kh√¥ng
            const response = await fetch(`${this.baseUrl}/channels?part=snippet,localizations&id=${channelIdsString}&hl=en&key=${this.getCurrentApiKey()}`);
            const data = await response.json();
            
            if (data.error) {
                console.warn('Error getting channel details:', data.error.message);
                return [];
            }
            
            // X·ª≠ l√Ω k·∫øt qu·∫£ ƒë·ªÉ ch·ªçn t√™n channel ph√π h·ª£p
            const processedChannels = data.items.map(channel => {
                const defaultTitle = channel.snippet.title;
                let finalTitle = defaultTitle;
                
                // Ki·ªÉm tra xem c√≥ localized title ti·∫øng Anh kh√¥ng
                if (channel.localizations && channel.localizations.en) {
                    const englishTitle = channel.localizations.en.title;
                    
                    if (englishTitle && englishTitle.trim() !== '') {
                        finalTitle = englishTitle;
                        console.log(`‚úÖ Channel ${channel.id} c√≥ t√™n ti·∫øng Anh: "${englishTitle}"`);
                    } else {
                        console.log(`üåê Channel ${channel.id} kh√¥ng c√≥ t√™n ti·∫øng Anh, gi·ªØ nguy√™n: "${defaultTitle}"`);
                    }
                } else {
                    console.log(`üåê Channel ${channel.id} kh√¥ng h·ªó tr·ª£ ti·∫øng Anh, gi·ªØ nguy√™n: "${defaultTitle}"`);
                }
                
                // T·∫°o channel object v·ªõi t√™n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                return {
                    ...channel,
                    snippet: {
                        ...channel.snippet,
                        title: finalTitle
                    }
                };
            });
            
            return processedChannels;
        } catch (error) {
            console.warn('Error fetching channel details:', error);
            return [];
        }
    }
    
    formatNumber(num) {
        // Format s·ªë v·ªõi d·∫•u ph·∫©y
        return parseInt(num).toLocaleString('vi-VN');
    }
    
    formatDuration(duration, liveStreamingDetails = null) {
        // Ki·ªÉm tra n·∫øu l√† video live
        if (liveStreamingDetails && liveStreamingDetails.actualStartTime) {
            // N·∫øu c√≥ actualEndTime, t√≠nh th·ªùi l∆∞·ª£ng t·ª´ start ƒë·∫øn end
            if (liveStreamingDetails.actualEndTime) {
                const startTime = new Date(liveStreamingDetails.actualStartTime);
                const endTime = new Date(liveStreamingDetails.actualEndTime);
                const elapsedMs = endTime - startTime;
                
                // Chuy·ªÉn ƒë·ªïi milliseconds th√†nh gi·ªù:ph√∫t:gi√¢y
                const hours = Math.floor(elapsedMs / (1000 * 60 * 60));
                const minutes = Math.floor((elapsedMs % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((elapsedMs % (1000 * 60)) / 1000);
                
                if (hours > 0) {
                    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                } else {
                    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
            } else {
                // N·∫øu ƒëang live, hi·ªÉn th·ªã th·ªùi gian t·ª´ khi b·∫Øt ƒë·∫ßu
                const startTime = new Date(liveStreamingDetails.actualStartTime);
                const currentTime = new Date();
                const elapsedMs = currentTime - startTime;
                
                // Chuy·ªÉn ƒë·ªïi milliseconds th√†nh gi·ªù:ph√∫t:gi√¢y
                const hours = Math.floor(elapsedMs / (1000 * 60 * 60));
                const minutes = Math.floor((elapsedMs % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((elapsedMs % (1000 * 60)) / 1000);
                
                if (hours > 0) {
                    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} (Live)`;
                } else {
                    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} (Live)`;
                }
            }
        }
        
        // X·ª≠ l√Ω video th∆∞·ªùng
        const match = duration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
        if (!match) return '00:00';
        
        const hours = parseInt(match[1] || 0);
        const minutes = parseInt(match[2] || 0);
        const seconds = parseInt(match[3] || 0);
        
        if (hours > 0) {
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        } else {
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
    }
    
    createSummary(channelName, channelId, title, videoId, duration, keyword, customValue = '', channelUrl = null) {
        // L·∫•y danh s√°ch c·ªôt ƒë∆∞·ª£c ch·ªçn (n·∫øu c√≥ checkbox)
        const selectedColumns = this.getSelectedColumnsForSummary();
        const parts = [];
        
        // S·ª≠ d·ª•ng channelUrl ƒë∆∞·ª£c truy·ªÅn v√†o, ho·∫∑c fallback
        if (!channelUrl) {
            channelUrl = `https://www.youtube.com/channel/${channelId}`;
        }
        
        // Extract channel handle t·ª´ channelUrl for ab_channel parameter
        let abChannelParam = channelId; // fallback to channelId
        if (channelUrl && channelUrl.includes('/@')) {
            const match = channelUrl.match(/@([^/?]+)/);
            if (match) {
                abChannelParam = '@' + match[1];
            }
        }
        
        // Map d·ªØ li·ªáu v·ªõi custom URL th·ª±c t·∫ø
        const dataMap = {
            channelName: channelName,
            channelUrl: channelUrl, // S·ª≠ d·ª•ng custom URL th·ª±c t·∫ø
            title: title,
            videoUrl: `https://www.youtube.com/watch?v=${videoId}&ab_channel=${abChannelParam}`,
            duration: duration,
            keyword: keyword,
            videoId: videoId
        };
        
        // N·∫øu c√≥ checkbox, th√™m c√°c c·ªôt ƒë∆∞·ª£c ch·ªçn theo th·ª© t·ª±
        if (selectedColumns.length > 0) {
            // Th·ª© t·ª± c·ªë ƒë·ªãnh theo format c≈©
            const defaultOrder = ['channelName', 'channelUrl', 'title', 'videoUrl', 'duration', 'keyword'];
            
            defaultOrder.forEach(column => {
                if (selectedColumns.includes(column) && dataMap[column]) {
                    parts.push(dataMap[column]);
                }
            });
        } else {
            // Format m·∫∑c ƒë·ªãnh: channelName---channelUrl---title---videoUrl---duration---keyword
            parts.push(channelName);
            parts.push(channelUrl); // S·ª≠ d·ª•ng custom URL th·ª±c t·∫ø
            parts.push(title);
            parts.push(`https://www.youtube.com/watch?v=${videoId}&ab_channel=${abChannelParam}`);
            parts.push(duration);
            parts.push(keyword);
        }
        
        let summary = parts.join('---');
        
        // Th√™m c√°c ph·∫ßn t√πy ch·ªçn v√†o cu·ªëi
        const additions = this.getFormatAdditions(channelName, title);
        if (additions) {
            summary += additions;
        }
        
        // Th√™m gi√° tr·ªã b·ªï sung n·∫øu c√≥
        if (customValue) {
            summary += `---${customValue}`;
        }
        
        return summary;
    }
    
    getSelectedColumnsForSummary() {
        const columns = [];
        
        // Th·ª© t·ª± c·ªë ƒë·ªãnh theo format c≈©
        const columnOrder = [
            { id: 'includeChannelName', key: 'channelName' },
            { id: 'includeChannelUrl', key: 'channelUrl' },
            { id: 'includeTitle', key: 'title' },
            { id: 'includeVideoUrl', key: 'videoUrl' },
            { id: 'includeDuration', key: 'duration' },
            { id: 'includeKeyword', key: 'keyword' },
            { id: 'includeVideoId', key: 'videoId' }
        ];
        
        columnOrder.forEach(col => {
            const element = document.getElementById(col.id);
            if (element && element.checked) {
                columns.push(col.key);
            }
        });
        
        return columns;
    }
    
    getFormatAdditions(channelName, videoTitle) {
        const addChannelName = document.getElementById('addChannelName')?.checked || false;
        const addVideoTitle = document.getElementById('addVideoTitle')?.checked || false;
        
        if (!addChannelName && !addVideoTitle) {
            return '';
        }
        
        let additions = '';
        
        // L·∫•y th·ª© t·ª± c√°c checkbox ƒë∆∞·ª£c tick (theo th·ªùi gian tick)
        const tickOrder = this.getTickOrder();
        
        tickOrder.forEach(option => {
            if (option === 'channelName' && addChannelName) {
                additions += `|${channelName}`;
            } else if (option === 'videoTitle' && addVideoTitle) {
                additions += `|${videoTitle}`;
            }
        });
        
        return additions;
    }
    
    getTickOrder() {
        // Tr·∫£ v·ªÅ th·ª© t·ª± c√°c option ƒë∆∞·ª£c tick
        // M·∫∑c ƒë·ªãnh l√† channelName tr∆∞·ªõc, videoTitle sau
        return this.tickOrder || ['channelName', 'videoTitle'];
    }
    
    updateTickOrder(option) {
        if (!this.tickOrder) {
            this.tickOrder = [];
        }
        
        // X√≥a option kh·ªèi danh s√°ch n·∫øu ƒë√£ c√≥
        this.tickOrder = this.tickOrder.filter(item => item !== option);
        
        // Th√™m v√†o cu·ªëi danh s√°ch
        this.tickOrder.push(option);
        
        console.log('Tick order updated:', this.tickOrder);
    }
    
    removeFromTickOrder(option) {
        if (this.tickOrder) {
            this.tickOrder = this.tickOrder.filter(item => item !== option);
        }
    }
    
    applyCustomValues() {
        if (this.searchResults.length === 0) {
            alert('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ √°p d·ª•ng!');
            return;
        }
        
        const customDuration = document.getElementById('customDuration').value.trim();
        const customValue = document.getElementById('customValue').value.trim();
        
        // C·∫≠p nh·∫≠t t·∫•t c·∫£ k·∫øt qu·∫£ v·ªõi gi√° tr·ªã t√πy ch·ªânh
        this.searchResults.forEach(result => {
            const finalDuration = customDuration || result.originalDuration;
            result.summary = this.createSummary(
                result.channelName,
                result.channelId,
                result.title,
                result.videoId,
                finalDuration,
                result.keyword,
                customValue,
                result.channelUrl // Truy·ªÅn channelUrl t·ª´ result
            );
        });
        
        // Hi·ªÉn th·ªã l·∫°i k·∫øt qu·∫£
        this.displayResults();
        
        // Th√¥ng b√°o th√†nh c√¥ng
        const notification = document.createElement('div');
        const addChannelName = document.getElementById('addChannelName')?.checked || false;
        const addVideoTitle = document.getElementById('addVideoTitle')?.checked || false;
        
        let formatInfo = '';
        if (addChannelName && addVideoTitle) {
            formatInfo = ' v·ªõi |t√™n k√™nh v√† |t√™n video';
        } else if (addChannelName) {
            formatInfo = ' v·ªõi |t√™n k√™nh';
        } else if (addVideoTitle) {
            formatInfo = ' v·ªõi |t√™n video';
        }
        
        notification.textContent = `ƒê√£ √°p d·ª•ng th√†nh c√¥ng${formatInfo}!`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4ecdc4;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            z-index: 1000;
            font-weight: bold;
        `;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 3000);
    }
    
    displayResults() {
        const tbody = document.getElementById('resultsBody');
        tbody.innerHTML = '';
        
        this.searchResults.forEach((result, index) => {
            const row = document.createElement('tr');
            row.setAttribute('data-index', index);
            
            row.innerHTML = `
                <td class="stt-cell" onclick="toggleRowCheckbox(${index})">${index + 1}</td>
                <td class="checkbox-cell" onclick="toggleRowCheckbox(${index})">
                    <input type="checkbox" class="row-checkbox" data-index="${index}">
                </td>
                <td class="thumbnail-cell">
                    <img src="${result.thumbnail}" alt="Video thumbnail" class="video-thumbnail" onclick="showThumbnailModal('${result.thumbnail}', '${result.title.replace(/'/g, "\\'")}', '${result.channelName.replace(/'/g, "\\'")}', '${result.duration}', '${result.videoUrl}')">
                </td>
                <td>${result.keyword}</td>
                <td>${result.title}</td>
                <td>${result.videoId}</td>
                <td><a href="${result.videoUrl}" target="_blank">${result.videoUrl}</a></td>
                <td>${result.channelName}</td>
                <td><a href="${result.channelUrl}" target="_blank">${result.channelUrl}</a></td>
                <td>${result.duration}</td>
                <td>${result.viewCount}</td>
                <td>
                    <button class="comment-btn" onclick="loadVideoComments('${result.videoId}', '${result.title.replace(/'/g, "\\'")}', '${result.channelName.replace(/'/g, "\\'")}')">
                        üí¨ Xem
                    </button>
                </td>
                <td>
                    <span class="summary-text">${result.summary}</span>
                    <button class="copy-btn" onclick="copyToClipboard('${result.summary.replace(/'/g, "\\'")}')">Copy</button>
                </td>
            `;
            tbody.appendChild(row);
        });
        
        // Th√™m event listeners cho t·∫•t c·∫£ checkbox
        document.querySelectorAll('.row-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.updateCopySelectedButton();
                this.updateRowSelection(checkbox);
            });
        });
        
        document.getElementById('results').classList.remove('hidden');
        this.updateCopySelectedButton();
    }
    
    updateRowSelection(checkbox) {
        const row = checkbox.closest('tr');
        if (checkbox.checked) {
            row.classList.add('selected');
        } else {
            row.classList.remove('selected');
        }
    }

    toggleAllRows(checked) {
        document.querySelectorAll('.row-checkbox').forEach(checkbox => {
            checkbox.checked = checked;
            this.updateRowSelection(checkbox);
        });
        this.updateCopySelectedButton();
    }

    updateCopySelectedButton() {
        const selectedCheckboxes = document.querySelectorAll('.row-checkbox:checked');
        const copySelectedBtn = document.getElementById('copySelectedBtn');
        
        if (copySelectedBtn) {
            copySelectedBtn.disabled = selectedCheckboxes.length === 0;
            copySelectedBtn.textContent = `üìÑ Copy ƒë√£ ch·ªçn (${selectedCheckboxes.length})`;
        }
        
        // Update select all checkbox state
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox && allCheckboxes.length > 0) {
            const checkedCount = selectedCheckboxes.length;
            const totalCount = allCheckboxes.length;
            
            if (checkedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (checkedCount === totalCount) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }
    }

    downloadResults() {
        if (this.searchResults.length === 0) {
            alert('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ copy!');
            return;
        }
        
        // T·∫°o n·ªôi dung ƒë·ªÉ copy t·∫•t c·∫£ 11 c·ªôt (bao g·ªìm STT, kh√¥ng bao g·ªìm checkbox)
        const allData = this.searchResults.map((result, index) => [
            index + 1, // STT
            result.keyword,
            result.title,
            result.videoId,
            result.videoUrl,
            result.channelName,
            result.channelUrl,
            result.duration,
            result.viewCount,
            'Comment', // Placeholder cho comment
            result.summary
        ]);
        
        // Chuy·ªÉn ƒë·ªïi th√†nh text v·ªõi tab ngƒÉn c√°ch
        const textToCopy = allData.map(row => row.join('\t')).join('\n');
        
        // Copy v√†o clipboard
        navigator.clipboard.writeText(textToCopy).then(() => {
            // T·∫°o th√¥ng b√°o t·∫°m th·ªùi
            const notification = document.createElement('div');
            notification.textContent = 'ƒê√£ copy t·∫•t c·∫£ d·ªØ li·ªáu!';
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4ecdc4;
                color: white;
                padding: 10px 20px;
                border-radius: 5px;
                z-index: 1000;
                font-weight: bold;
            `;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 2000);
        }).catch(err => {
            console.error('Copy failed:', err);
            alert('Kh√¥ng th·ªÉ copy. Vui l√≤ng copy th·ªß c√¥ng.');
        });
    }
    
    copyColumn8() {
        if (this.searchResults.length === 0) {
            alert('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ copy!');
            return;
        }
        
        // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·ªôt 8 (summary)
        const column8Data = this.searchResults.map(result => result.summary);
        
        // Chuy·ªÉn ƒë·ªïi th√†nh text v·ªõi xu·ªëng d√≤ng ngƒÉn c√°ch
        const textToCopy = column8Data.join('\n');
        
        // Copy v√†o clipboard
        navigator.clipboard.writeText(textToCopy).then(() => {
            // T·∫°o th√¥ng b√°o t·∫°m th·ªùi
            const notification = document.createElement('div');
            notification.textContent = 'ƒê√£ copy c·ªôt 8!';
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4ecdc4;
                color: white;
                padding: 10px 20px;
                border-radius: 5px;
                z-index: 1000;
                font-weight: bold;
            `;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 2000);
        }).catch(err => {
            console.error('Copy failed:', err);
            alert('Kh√¥ng th·ªÉ copy. Vui l√≤ng copy th·ªß c√¥ng.');
        });
    }
    
    updateResultsIfAvailable() {
        // T·ª± ƒë·ªông c·∫≠p nh·∫≠t k·∫øt qu·∫£ n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu
        if (this.searchResults.length > 0) {
            const customDuration = document.getElementById('customDuration').value.trim();
            const customValue = document.getElementById('customValue').value.trim();
            
            this.searchResults.forEach(result => {
                const finalDuration = customDuration || result.originalDuration;
                result.summary = this.createSummary(
                    result.channelName,
                    result.channelId,
                    result.title,
                    result.videoId,
                    finalDuration,
                    result.keyword,
                    customValue,
                    result.channelUrl // Truy·ªÅn channelUrl t·ª´ result
                );
            });
            
            this.displayResults();
        }
    }
    
    // ƒê·∫£m b·∫£o loading methods t·ªìn t·∫°i
    showLoading() {
        const loadingElement = document.getElementById('loading');
        if (loadingElement) {
            loadingElement.classList.remove('hidden');
        }
        const resultsElement = document.getElementById('results');
        if (resultsElement) {
            resultsElement.classList.add('hidden');
        }
    }
    
    hideLoading() {
        const loadingElement = document.getElementById('loading');
        if (loadingElement) {
            loadingElement.classList.add('hidden');
        }
    }
    
    showError(message) {
        const errorDiv = document.getElementById('error');
        if (errorDiv) {
            const errorP = errorDiv.querySelector('p');
            if (errorP) {
                errorP.textContent = message;
            }
            errorDiv.classList.remove('hidden');
        } else {
            alert(message); // Fallback
        }
    }
    
    hideError() {
        const errorDiv = document.getElementById('error');
        if (errorDiv) {
            errorDiv.classList.add('hidden');
        }
    }

    // Th√™m method m·ªõi ƒë·ªÉ load comments
    async loadComments(videoId, pageToken = null) {
        try {
            // Load nhi·ªÅu h∆°n m·ªói l·∫ßn ƒë·ªÉ ƒë·∫°t target nhanh h∆°n
            const batchSize = Math.min(50, Math.max(20, this.targetCommentCount - this.currentCommentCount));
            
            let url = `${this.baseUrl}/commentThreads?part=snippet&videoId=${videoId}&maxResults=${batchSize}&order=relevance&key=${this.getCurrentApiKey()}`;
            
            if (pageToken) {
                url += `&pageToken=${pageToken}`;
            }
            
            const response = await fetch(url);
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error.message);
            }
            
            return {
                items: data.items || [],
                nextPageToken: data.nextPageToken || null,
                totalResults: data.pageInfo?.totalResults || 0
            };
        } catch (error) {
            console.error('Error loading comments:', error);
            throw error;
        }
    }

    // Method m·ªõi ƒë·ªÉ load s·ªë l∆∞·ª£ng comment c·ª• th·ªÉ
    async loadSpecificAmountComments(targetCount) {
        if (!this.currentVideoId || this.isLoadingComments) {
            return;
        }

        this.isLoadingComments = true;
        this.targetCommentCount = targetCount || parseInt(document.getElementById('commentLimit').value) || 50;
        this.currentCommentCount = 0;
        
        // Reset comment list
        document.getElementById('commentList').innerHTML = '';
        document.getElementById('commentLoading').classList.remove('hidden');
        document.getElementById('commentError').classList.add('hidden');
        
        // Reset pagination
        this.nextPageToken = null;
        this.hasMoreComments = true;

        try {
            while (this.currentCommentCount < this.targetCommentCount && this.hasMoreComments) {
                const result = await this.loadComments(this.currentVideoId, this.nextPageToken);
                
                if (result.items.length === 0) {
                    this.hasMoreComments = false;
                    break;
                }
                
                // T√≠nh to√°n s·ªë comment c·∫ßn th√™m
                const remainingNeeded = this.targetCommentCount - this.currentCommentCount;
                const commentsToAdd = result.items.slice(0, remainingNeeded);
                
                // Append comments
                this.appendCommentsToList(commentsToAdd);
                this.currentCommentCount += commentsToAdd.length;
                
                // Update pagination
                this.nextPageToken = result.nextPageToken;
                this.hasMoreComments = !!result.nextPageToken && this.currentCommentCount < this.targetCommentCount;
                
                // Small delay ƒë·ªÉ tr√°nh rate limit
                if (this.hasMoreComments && this.currentCommentCount < this.targetCommentCount) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
            }
            
            // Update UI
            document.getElementById('commentLoading').classList.add('hidden');
            
            if (this.currentCommentCount === 0) {
                document.getElementById('commentList').innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">Kh√¥ng c√≥ comment n√†o</p>';
            } else if (!this.hasMoreComments && this.currentCommentCount < this.targetCommentCount) {
                this.showEndOfComments(`ƒê√£ t·∫£i h·∫øt ${this.currentCommentCount} comment c√≥ s·∫µn`);
            }
            
        } catch (error) {
            document.getElementById('commentLoading').classList.add('hidden');
            this.showCommentError('Kh√¥ng th·ªÉ t·∫£i comment: ' + error.message);
            console.error('Error:', error);
        } finally {
            this.isLoadingComments = false;
        }
    }

    appendCommentsToList(comments) {
        const commentList = document.getElementById('commentList');
        
        comments.forEach((commentData, index) => {
            const comment = commentData.snippet.topLevelComment.snippet;
            const commentElement = document.createElement('div');
            commentElement.className = 'comment-item';
            commentElement.setAttribute('data-comment-index', this.getAllCommentsCount() + index);
            
            // Clean comment text (remove newlines v√† extra spaces)
            const cleanText = comment.textDisplay.replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
            
            commentElement.innerHTML = `
                <img src="${comment.authorProfileImageUrl}" alt="${comment.authorDisplayName}" class="comment-avatar">
                <div class="comment-content">
                    <div class="comment-author">${comment.authorDisplayName}</div>
                    <div class="comment-text" title="${cleanText}">${cleanText}</div>
                    <div class="comment-meta">
                        <div class="comment-likes">üëç ${comment.likeCount}</div>
                        <div class="comment-date">${new Date(comment.publishedAt).toLocaleDateString('vi-VN')}</div>
                        ${comment.totalReplyCount > 0 ? `<div class="comment-replies">üí¨ ${comment.totalReplyCount}</div>` : ''}
                    </div>
                </div>
                <div class="comment-actions">
                    <button class="comment-copy-btn" onclick="copyComment('${cleanText.replace(/'/g, "\\'")}')">Copy</button>
                </div>
            `;
            
            commentList.appendChild(commentElement);
        });
        
        // Update copy all button state
        this.updateCopyAllButton();
    }

    getAllCommentsCount() {
        return document.querySelectorAll('.comment-item').length;
    }

    updateCopyAllButton() {
        const copyAllBtn = document.getElementById('copyAllCommentsBtn');
        const commentCount = this.getAllCommentsCount();
        
        if (copyAllBtn) {
            copyAllBtn.disabled = commentCount === 0;
            copyAllBtn.textContent = `üìã Copy All (${commentCount})`;
        }
    }

    getAllCommentTexts() {
        const comments = [];
        document.querySelectorAll('.comment-item .comment-text').forEach(textElement => {
            const text = textElement.textContent.trim();
            if (text) {
                comments.push(text);
            }
        });
        return comments;
    }

    showInfiniteLoading() {
        let loadingDiv = document.getElementById('infiniteLoading');
        if (!loadingDiv) {
            loadingDiv = document.createElement('div');
            loadingDiv.id = 'infiniteLoading';
            loadingDiv.className = 'infinite-loading';
            loadingDiv.innerHTML = `
                <div class="spinner"></div>
                <span>ƒêang t·∫£i th√™m comment...</span>
            `;
            document.getElementById('commentList').appendChild(loadingDiv);
        }
        loadingDiv.classList.remove('hidden');
    }

    hideInfiniteLoading() {
        const loadingDiv = document.getElementById('infiniteLoading');
        if (loadingDiv) {
            loadingDiv.classList.add('hidden');
        }
    }

    showEndOfComments(message = 'üèÅ ƒê√£ hi·ªÉn th·ªã h·∫øt comment') {
        let endDiv = document.getElementById('endOfComments');
        if (!endDiv) {
            endDiv = document.createElement('div');
            endDiv.id = 'endOfComments';
            endDiv.className = 'end-of-comments';
            document.getElementById('commentList').appendChild(endDiv);
        }
        endDiv.innerHTML = message;
        endDiv.classList.remove('hidden');
    }

    showCommentError(message) {
        const errorDiv = document.getElementById('commentError');
        errorDiv.querySelector('p').textContent = message;
        errorDiv.classList.remove('hidden');
    }

    selectAllRows() {
        document.querySelectorAll('.row-checkbox').forEach(checkbox => {
            checkbox.checked = true;
            checkbox.closest('tr').classList.add('selected');
        });
        document.getElementById('selectAllCheckbox').checked = true;
        this.updateCopySelectedButton();
    }

    deselectAllRows() {
        document.querySelectorAll('.row-checkbox').forEach(checkbox => {
            checkbox.checked = false;
            checkbox.closest('tr').classList.remove('selected');
        });
        document.getElementById('selectAllCheckbox').checked = false;
        this.updateCopySelectedButton();
    }

    toggleAllRows(checked) {
        document.querySelectorAll('.row-checkbox').forEach(checkbox => {
            checkbox.checked = checked;
            if (checked) {
                checkbox.closest('tr').classList.add('selected');
            } else {
                checkbox.closest('tr').classList.remove('selected');
            }
        });
        this.updateCopySelectedButton();
    }

    updateCopySelectedButton() {
        const selectedCheckboxes = document.querySelectorAll('.row-checkbox:checked');
        const copySelectedBtn = document.getElementById('copySelectedBtn');
        
        if (copySelectedBtn) {
            copySelectedBtn.disabled = selectedCheckboxes.length === 0;
            copySelectedBtn.textContent = `üìÑ Copy ƒë√£ ch·ªçn (${selectedCheckboxes.length})`;
        }
        
        // Update select all checkbox state
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox && allCheckboxes.length > 0) {
            const checkedCount = selectedCheckboxes.length;
            const totalCount = allCheckboxes.length;
            
            if (checkedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (checkedCount === totalCount) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }
    }

    copySelectedRows() {
        const selectedCheckboxes = document.querySelectorAll('.row-checkbox:checked');
        
        if (selectedCheckboxes.length === 0) {
            alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ copy!');
            return;
        }
        
        // Ch·ªâ l·∫•y ph·∫ßn t·ªïng h·ª£p (summary) c·ªßa nh·ªØng h√†ng ƒë√£ ch·ªçn
        const selectedSummaries = Array.from(selectedCheckboxes).map(checkbox => {
            const index = parseInt(checkbox.dataset.index);
            const result = this.searchResults[index];
            return result.summary;
        });
        
        // Chuy·ªÉn ƒë·ªïi th√†nh text v·ªõi xu·ªëng d√≤ng ngƒÉn c√°ch (gi·ªëng nh∆∞ Copy c·ªôt 8)
        const textToCopy = selectedSummaries.join('\n');
        
        navigator.clipboard.writeText(textToCopy).then(() => {
            showNotification(`ƒê√£ copy t·ªïng h·ª£p c·ªßa ${selectedCheckboxes.length} d√≤ng ƒë√£ ch·ªçn!`, 3000);
        }).catch(err => {
            console.error('Copy failed:', err);
            alert('Kh√¥ng th·ªÉ copy. Vui l√≤ng copy th·ªß c√¥ng.');
        });
    }
}

// Global functions
function copyComment(text) {
    navigator.clipboard.writeText(text).then(() => {
        showNotification('ƒê√£ copy comment!');
    }).catch(err => {
        console.error('Copy failed:', err);
        alert('Kh√¥ng th·ªÉ copy. Vui l√≤ng copy th·ªß c√¥ng.');
    });
}

function copyAllComments() {
    const toolInstance = window.youtubeSearchTool;
    const comments = toolInstance.getAllCommentTexts();
    
    if (comments.length === 0) {
        alert('Kh√¥ng c√≥ comment n√†o ƒë·ªÉ copy!');
        return;
    }
    
    // Ch·ªâ copy text comment, m·ªói comment m·ªôt d√≤ng
    const textToCopy = comments.join('\n');
    
    navigator.clipboard.writeText(textToCopy).then(() => {
        showNotification(`ƒê√£ copy ${comments.length} comments!`, 3000);
    }).catch(err => {
        console.error('Copy failed:', err);
        
        // Fallback: t·∫°o textarea ƒë·ªÉ user c√≥ th·ªÉ copy manual
        const textarea = document.createElement('textarea');
        textarea.value = textToCopy;
        textarea.style.position = 'fixed';
        textarea.style.top = '0';
        textarea.style.left = '0';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        textarea.select();
        
        try {
            document.execCommand('copy');
            showNotification(`ƒê√£ copy ${comments.length} comments!`, 3000);
        } catch (err) {
            alert('Kh√¥ng th·ªÉ copy t·ª± ƒë·ªông. Vui l√≤ng copy th·ªß c√¥ng.');
        }
        
        document.body.removeChild(textarea);
    });
}

function loadSpecificAmountComments() {
    const loadBtn = document.getElementById('loadCommentsBtn');
    const input = document.getElementById('commentLimit');
    const targetCount = parseInt(input.value);
    
    if (!targetCount || targetCount < 10 || targetCount > 500) {
        alert('Vui l√≤ng nh·∫≠p s·ªë t·ª´ 10 ƒë·∫øn 500');
        return;
    }
    
    // Update UI
    loadBtn.classList.add('loading');
    loadBtn.disabled = true;
    
    const toolInstance = window.youtubeSearchTool;
    toolInstance.loadSpecificAmountComments(targetCount).finally(() => {
        loadBtn.classList.remove('loading');
        loadBtn.disabled = false;
    });
}

function showNotification(message, duration = 2000) {
    // Remove existing notification
    const existingNotification = document.getElementById('copyNotification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
        const notification = document.createElement('div');
    notification.id = 'copyNotification';
    notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4ecdc4;
            color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 3000;
            font-weight: bold;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        animation: slideIn 0.3s ease-out;
    `;
    
    // Add animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
        document.body.appendChild(notification);
        
        setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }
    }, duration);
}

// Global functions cho thumbnail modal
function showThumbnailModal(thumbnailUrl, videoTitle, channelName, duration, videoUrl) {
    // Hi·ªÉn th·ªã modal
    document.getElementById('thumbnailModal').classList.remove('hidden');
    
    // Set thumbnail image
    document.getElementById('zoomedThumbnail').src = thumbnailUrl;
    
    // Set video info
    document.getElementById('thumbnailVideoTitle').textContent = videoTitle;
    document.getElementById('thumbnailVideoChannel').textContent = channelName;
    document.getElementById('thumbnailVideoDuration').textContent = `Th·ªùi l∆∞·ª£ng: ${duration}`;
    
    // Store video URL for open button
    document.getElementById('openVideoBtn').setAttribute('data-video-url', videoUrl);
}

function closeThumbnailModal() {
    document.getElementById('thumbnailModal').classList.add('hidden');
}

function openVideoFromThumbnail() {
    const videoUrl = document.getElementById('openVideoBtn').getAttribute('data-video-url');
    if (videoUrl) {
        window.open(videoUrl, '_blank');
    }
}

// Global functions cho modal
async function loadVideoComments(videoId, title, channelName) {
    // Hi·ªÉn th·ªã modal
    document.getElementById('commentModal').classList.remove('hidden');
    
    // Set video info
    document.getElementById('commentVideoTitle').textContent = title;
    document.getElementById('commentVideoChannel').textContent = channelName;
    
    // Reset states
    document.getElementById('commentLoading').classList.remove('hidden');
    document.getElementById('commentList').innerHTML = '';
    document.getElementById('commentError').classList.add('hidden');
    
    // Reset copy all button
    const copyAllBtn = document.getElementById('copyAllCommentsBtn');
    if (copyAllBtn) {
        copyAllBtn.disabled = true;
        copyAllBtn.textContent = 'üìã Copy All (0)';
    }
    
    // Reset load button
    const loadBtn = document.getElementById('loadCommentsBtn');
    if (loadBtn) {
        loadBtn.disabled = false;
        loadBtn.classList.remove('loading');
    }
    
    // Set up tool instance
    const toolInstance = window.youtubeSearchTool;
    toolInstance.currentVideoId = videoId;
    toolInstance.nextPageToken = null;
    toolInstance.isLoadingComments = false;
    toolInstance.hasMoreComments = true;
    toolInstance.currentCommentCount = 0;
    
    // Load initial amount
    const initialCount = parseInt(document.getElementById('commentLimit').value) || 50;
    
    try {
        await toolInstance.loadSpecificAmountComments(initialCount);
    } catch (error) {
        document.getElementById('commentLoading').classList.add('hidden');
        document.getElementById('commentError').classList.remove('hidden');
        console.error('Error:', error);
    }
}

function setupInfiniteScroll() {
    const commentList = document.getElementById('commentList');
    
    // Remove existing scroll listener
    commentList.removeEventListener('scroll', handleCommentScroll);
    
    // Add new scroll listener
    commentList.addEventListener('scroll', handleCommentScroll);
}

function handleCommentScroll() {
    const commentList = document.getElementById('commentList');
    const toolInstance = window.youtubeSearchTool;
    
    // Check if user scrolled near bottom (within 50px)
    if (commentList.scrollTop + commentList.clientHeight >= commentList.scrollHeight - 50) {
        if (!toolInstance.isLoadingComments && toolInstance.hasMoreComments) {
            toolInstance.loadMoreComments();
        }
    }
}

function closeCommentModal() {
    document.getElementById('commentModal').classList.add('hidden');
    
    // Clean up scroll listener
    const commentList = document.getElementById('commentList');
    if (commentList) {
        commentList.removeEventListener('scroll', handleCommentScroll);
    }
    
    // Reset state
    const toolInstance = window.youtubeSearchTool;
    if (toolInstance) {
        toolInstance.currentVideoId = null;
        toolInstance.nextPageToken = null;
        toolInstance.isLoadingComments = false;
        toolInstance.hasMoreComments = true;
        toolInstance.currentCommentCount = 0; // Reset comment count
    }
}

// Close modal khi click outside
window.onclick = function(event) {
    const commentModal = document.getElementById('commentModal');
    const thumbnailModal = document.getElementById('thumbnailModal');
    
    if (event.target == commentModal) {
        closeCommentModal();
    } else if (event.target == thumbnailModal) {
        closeThumbnailModal();
    }
}

// Keyboard shortcut ƒë·ªÉ ƒë√≥ng modal (ESC)
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const commentModal = document.getElementById('commentModal');
        const thumbnailModal = document.getElementById('thumbnailModal');
        
        if (!commentModal.classList.contains('hidden')) {
            closeCommentModal();
        } else if (!thumbnailModal.classList.contains('hidden')) {
            closeThumbnailModal();
        }
    }
});

// C·∫≠p nh·∫≠t ph·∫ßn kh·ªüi t·∫°o
document.addEventListener('DOMContentLoaded', () => {
    window.youtubeSearchTool = new YouTubeSearchTool();
});

// Global function ƒë·ªÉ toggle checkbox khi click v√†o cell
function toggleRowCheckbox(index) {
    const checkbox = document.querySelector(`.row-checkbox[data-index="${index}"]`);
    if (checkbox) {
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event('change'));
    }
}

// Function ƒë·ªÉ toggle select all khi click v√†o header
function toggleSelectAll() {
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const toolInstance = window.youtubeSearchTool;
    
    if (selectAllCheckbox && toolInstance) {
        selectAllCheckbox.checked = !selectAllCheckbox.checked;
        toolInstance.toggleAllRows(selectAllCheckbox.checked);
    }
}

// Global function ƒë·ªÉ remove API key
function removeApiKey(index) {
    const toolInstance = window.youtubeSearchTool;
    if (toolInstance) {
        toolInstance.removeApiKeyAt(index);
    }
}
